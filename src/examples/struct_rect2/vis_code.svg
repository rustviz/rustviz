<svg height="940px" 
        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

    <desc>examples/struct_rect2</desc>

    <defs>
        <style type="text/css">
        <![CDATA[
        /* general setup */
:root {
    --bg-color:#f1f1f1;
    --text-color: #6e6b5e;
}

svg {
    background-color: var(--bg-color);
}

text {
    vertical-align: baseline;
    text-anchor: start;
}

#heading {
    font-size: 24px;
    font-weight: bold;
}

#caption {
    font-size: 0.875em;
    font-family: "Open Sans", sans-serif;
    font-style: italic;
}

/* code related styling */
text.code {
    fill: #6e6b5e;
    white-space: pre;
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}

text.label {
    font-family: "Source Code Pro", Consolas, "Ubuntu Mono", Menlo, "DejaVu Sans Mono", monospace, monospace !important;
    font-size: 0.875em;
}

/* timeline/event interaction styling */
.solid {
    stroke-width: 5px;
}

.hollow {
    stroke-width: 1.5;
}

.dotted {
    stroke-width: 5px;
    stroke-dasharray: "2 1";
}

.extend {
    stroke-width: 1px;
    stroke-dasharray: "2 1";
}

.functionIcon {
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color);
    font-size: 20px;
    font-family: times;
    font-weight: lighter;
    dominant-baseline: central;
    text-anchor: start;
    font-style: italic;
}

.functionLogo {
    font-size: 20px;
    font-style: italic;
    paint-order: stroke;
    stroke-width: 3px;
    fill: var(--bg-color) !important;
}

/* flex related styling */
.flex-container {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    flex-wrap: nowrap;
    flex-shrink: 0;
}

object.tl_panel {
    flex-grow: 1;
}

object.code_panel {
    flex-grow: 0;
}

.tooltip-trigger {
    cursor: default;
}

.tooltip-trigger:hover{
    filter: url(#glow);
}

/* hash based styling */
[data-hash="0"] {
    fill: #6e6b5e;
}

[data-hash="1"] {
    fill: #1893ff;
    stroke: #1893ff;
}

[data-hash="2"] {
    fill: #ff7f50;
    stroke: #ff7f50;
}

[data-hash="3"] {
    fill: #8635ff;
    stroke: #8635ff;
}

[data-hash="4"] {
    fill: #dc143c;
    stroke: #dc143c;
}

[data-hash="5"] {
    fill: #0a810a;
    stroke: #0a810a;
}

[data-hash="6"] {
    fill: #008080;
    stroke: #008080;
}

[data-hash="7"] {
    fill: #ff6cce;
    stroke: #ff6cce;
}

[data-hash="8"] {
    fill: #00d6fc;
    stroke: #00d6fc;
}

[data-hash="9"] {
    fill: #b99f35;
    stroke: #b99f35;
}
        ]]>
        </style>
    </defs>

    <g>
        <text id="caption" x="30" y="30">Hover over timeline events (dots), states (vertical lines),</text>
        <text id="caption" x="30" y="50">and actions (arrows) for extra information.</text>
    </g>

    <g id="code">
        <text class="code" x="20" y="90"> <tspan fill="#AAA">1  </tspan>struct Rectangle { </text>
        <text class="code" x="20" y="120"> <tspan fill="#AAA">2  </tspan>    <tspan data-hash="2">width</tspan>: u32, </text>
        <text class="code" x="20" y="150"> <tspan fill="#AAA">3  </tspan>    <tspan data-hash="3">height</tspan>: u32, </text>
        <text class="code" x="20" y="180"> <tspan fill="#AAA">4  </tspan>} </text>
        <text class="code" x="20" y="210"> <tspan fill="#AAA">5  </tspan> </text>
        <text class="code" x="20" y="240"> <tspan fill="#AAA">6  </tspan>impl Rectangle { </text>
        <text class="code" x="20" y="270"> <tspan fill="#AAA">7  </tspan>    fn area(&amp;self) -&gt; u32 { </text>
        <text class="code" x="20" y="300"> <tspan fill="#AAA">8  </tspan>        self.width * self.height </text>
        <text class="code" x="20" y="330"> <tspan fill="#AAA">9  </tspan>    } </text>
        <text class="code" x="20" y="360"> <tspan fill="#AAA">10  </tspan>} </text>
        <text class="code" x="20" y="390"> <tspan fill="#AAA">11  </tspan> </text>
        <text class="code" x="20" y="420"> <tspan fill="#AAA">12  </tspan>fn <tspan class="fn" data-hash="0" hash="7">print_area</tspan>(<tspan data-hash="4">rect</tspan>: &amp;Rectangle) { </text>
        <text class="code" x="20" y="450"> <tspan fill="#AAA">13  </tspan>    println!( </text>
        <text class="code" x="20" y="480"> <tspan fill="#AAA">14  </tspan>        "The area of the rectangle is {} square pixels.", </text>
        <text class="code" x="20" y="510"> <tspan fill="#AAA">15  </tspan>       	<tspan data-hash="4">rect</tspan>.<tspan class="fn" data-hash="0" hash="6">area</tspan>() // dot even though it's actually a reference </text>
        <text class="code" x="20" y="540"> <tspan fill="#AAA">16  </tspan>    ); </text>
        <text class="code" x="20" y="570"> <tspan fill="#AAA">17  </tspan>} </text>
        <text class="code" x="20" y="600"> <tspan fill="#AAA">18  </tspan> </text>
        <text class="code" x="20" y="630"> <tspan fill="#AAA">19  </tspan>fn main() { </text>
        <text class="code" x="20" y="660"> <tspan fill="#AAA">20  </tspan>    let <tspan data-hash="1">r</tspan> = Rectangle { </text>
        <text class="code" x="20" y="690"> <tspan fill="#AAA">21  </tspan>        <tspan data-hash="2">width</tspan>: 30, </text>
        <text class="code" x="20" y="720"> <tspan fill="#AAA">22  </tspan>        <tspan data-hash="3">height</tspan>: 50, </text>
        <text class="code" x="20" y="750"> <tspan fill="#AAA">23  </tspan>    }; </text>
        <text class="code" x="20" y="780"> <tspan fill="#AAA">24  </tspan> </text>
        <text class="code" x="20" y="810"> <tspan fill="#AAA">25  </tspan>    <tspan class="fn" data-hash="0" hash="7">print_area</tspan>(<tspan data-hash="1">&amp;r</tspan>); </text>
        <text class="code" x="20" y="840"> <tspan fill="#AAA">26  </tspan>} </text>
    </g>

   
</svg>